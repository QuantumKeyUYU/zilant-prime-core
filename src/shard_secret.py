# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: 2025 Zilant Prime Core Contributors

from __future__ import annotations

import os
from typing import List

__all__ = ["split_secret", "recover_secret", "combine_signatures"]


def split_secret(secret: bytes, *, parts: int = 1) -> List[bytes]:
    """Split ``secret`` into ``parts`` using simple XOR-based sharding."""
    if parts <= 0:
        raise ValueError("parts must be positive")
    if parts == 1:
        return [secret]

    shards: List[bytes] = []
    accum = bytearray(secret)
    for _ in range(parts - 1):
        rand = os.urandom(len(secret))
        shards.append(rand)
        accum = bytearray(a ^ b for a, b in zip(accum, rand, strict=True))
    shards.append(bytes(accum))
    return shards


def recover_secret(shards: List[bytes]) -> bytes:
    """Recover secret from shards generated by :func:`split_secret`."""
    if not shards:
        return b""
    secret = bytearray(shards[0])
    for shard in shards[1:]:
        secret = bytearray(a ^ b for a, b in zip(secret, shard, strict=True))
    return bytes(secret)


def combine_signatures(sigs: List[bytes]) -> bytes:  # pragma: no cover - placeholder
    """Combine partial FROST signatures (placeholder)."""
    if not sigs:
        raise ValueError("no signatures provided")
    return sigs[0]
