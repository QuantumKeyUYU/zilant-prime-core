# SPDX-FileCopyrightText: 2025 Zilant Prime Core contributors
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  actions: read

jobs:
  build-test:
    name: Lint & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]  # Можно добавлять новые версии Python по мере необходимости.
    steps:
      # Шаг 1: Проверка кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Установка Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'  # Задание версии Python
          cache: pip  # Автоматическое кэширование pip-зависимостей

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"  # Установка зависимостей для разработки

      # Шаг 4: Линтинг
      - name: Lint
        run: |
          ruff check src tests  # Проверка линтинга с помощью ruff
          black --check src tests  # Проверка форматирования с помощью black
          mypy src  # Проверка типов с помощью mypy

      # Шаг 5: Запуск юнит-тестов с покрытием
      - name: Unit tests with coverage
        run: |
          pytest --cov=src --cov-report=xml  # Запуск pytest с покрытием и отчёт в формате XML

      # Шаг 6: Сборка и загрузка PQ колес
      - name: Build PQ wheels
        run: python tools/build_pq_wheels.py  # Сборка PQ wheels

      - name: Upload PQ wheels
        uses: actions/upload-artifact@v4
        with:
          name: pq-wheels  # Имя артефакта
          path: dist/*_pq*.whl  # Путь к файлам PQ колес

      # Шаг 7: Загрузка покрытия в Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4  # Интеграция с Codecov для анализа покрытия

  trivy-scan:
    name: Trivy SCA / CVE scan  # Название этапа для сканирования уязвимостей
    runs-on: ubuntu-latest
    needs: build-test  # Этот этап будет зависеть от успешного завершения build-test
    steps:
      # Шаг 1: Проверка кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Сканирование на уязвимости с помощью Trivy
      - name: Trivy scan (vuln only)
        uses: aquasecurity/trivy-action@0.20.0  # Использование действия Trivy для поиска уязвимостей
        with:
          scan-type: fs  # Тип сканирования (файловая система)
          scanners: vuln  # Сканирование на уязвимости
          ignore-unfixed: true  # Игнорирование нефиксируемых уязвимостей
          exit-code: '1'  # Выходной код 1 при обнаружении уязвимости

  # Другие возможные этапы, например, для анализа производительности, создания документации, сборки больших файлов:
  # perf, docs, large-file-test, cli-polish
