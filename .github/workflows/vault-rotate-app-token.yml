# SPDX-FileCopyrightText: 2025 Zilant Prime Core contributors
# SPDX-License-Identifier: MIT
name: Rotate Vault App Token

# Циклический запуск: каждый день (0 часов)
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

# Для корректной работы через GitHub Actions вам нужно в интерфейсе
# репозитория дать GITHUB_TOKEN право "secrets: write" (Settings → Actions → General → Workflow permissions).
# Но в этом YAML мы не указываем `permissions: secrets: write`, чтобы 'act' не падал на неизвестное поле.
permissions:
  contents: read
  id-token: write
  # ПРАВА СЕКРЕТОВ ДЛЯ GITHUB: пишем их явно в настройках репозитория,
  # а не в YAML. Это гарантирует совместимость с 'act'.

jobs:
  rotate-token:
    name: Rotate Vault App Token
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Vault credentials (skip if отсутствуют)
        run: |
          if [ -z "${VAULT_ADDR:-}" ] || [ -z "${VAULT_TOKEN:-}" ]; then
            echo "⚠️ VAULT_ADDR или VAULT_TOKEN не заданы — пропускаем ротацию."
            exit 0
          fi

      - name: Request new Vault token
        id: request_token
        run: |
          set -e
          echo "🔐 Ротация токена в Vault..."
          NEW_TOKEN=$(
            curl --silent \
              --header "X-Vault-Token: ${{ secrets.VAULT_TOKEN }}" \
              --request POST \
              --data '{"policies":["app-policy"],"ttl":"24h"}' \
              ${{ secrets.VAULT_ADDR }}/v1/auth/token/create \
              | jq -r .auth.client_token
          )
          if [ -z "$NEW_TOKEN" ] || [ "$NEW_TOKEN" == "null" ]; then
            echo "❌ Не удалось получить новый токен."
            exit 1
          fi
          echo "✅ Новый токен получен."
          echo "::set-output name=new_token::$NEW_TOKEN"

      - name: Fetch GitHub public key (для шифрования секрета)
        id: get_pubkey
        uses: actions/github-script@v7
        with:
          script: |
            const { data: publicKeyData } = await github.actions.getPublicKeyForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return publicKeyData;

      - name: Encrypt new token with GitHub public key
        id: encrypt
        run: |
          echo "${{ steps.get_pubkey.outputs.key }}" | base64 --decode > public.key
          PLAINTEXT="${{ steps.request_token.outputs.new_token }}"
          CIPHERTEXT=$(echo -n "$PLAINTEXT" | \
            openssl rsautl -encrypt -pubin -inkey public.key -oaep | base64)
          echo "::set-output name=encrypted_value::$CIPHERTEXT"
          echo "::set-output name=key_id::$(jq -r .key_id <<< '${{ steps.get_pubkey.outputs }}')"

      - name: Update GitHub Secret VAULT_APP_TOKEN
        uses: actions/github-script@v7
        with:
          script: |
            const keyId = '${{ steps.encrypt.outputs.key_id }}';
            const encryptedValue = '${{ steps.encrypt.outputs.encrypted_value }}';
            await github.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'VAULT_APP_TOKEN',
              encrypted_value: encryptedValue,
              key_id: keyId
            });
            console.log("✅ GitHub Secret VAULT_APP_TOKEN обновлён.");

      - name: (Опционально) Revoke old Vault token
        if: always()
        run: |
          echo "ℹ️ Если требуется, здесь можно отозвать старый токен: "
          echo "  curl --header \"X-Vault-Token: ${{ secrets.VAULT_TOKEN }}\" \\"
          echo "       --request POST ${{ secrets.VAULT_ADDR }}/v1/auth/token/revoke-self"
          # Закомментировано, т.к. ревокировать старый токен можно вручную или отдельным шагом.
